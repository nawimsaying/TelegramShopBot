import telebot
from telebot import types
import random
import time

import controller_db as db
import config

bot = config.get_bot()
admin_ids = []

class admin_state:
    name: str
    price: int
    description: str

def info_admin(message, state):
    if message.chat.id in admin_ids:
        if message.text == '!admin':
            try: delete_last_messages(message)
            except: bot.delete_message(message.chat.id, message.id)
            finally: pass
            show_admin(message)
        elif state == 'ads':
            users = db.get_all_users()
            count = 0
            if users is not None:
                for user in users:
                    try:
                        bot.send_message(int(user[0]), message.text)
                        count += 1
                    except:
                        pass
            delete_last_messages(message)
            bot.send_message(message.chat.id, f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ <b>{count} –∏–∑ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º</b>!', parse_mode='HTML')

        # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
        try: 
            if state.split('_')[0] == 'add':
                add_product(message, state)
        except: pass

def inline_admin(c):
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        if c.data.split('_')[1] == 'Order':
            order = db.get_order(c.data.split('_')[0])

            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º", callback_data=f"{c.data.split('_')[0]}_Complete")
            button2 = types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="BackToAdmin")
            markup.add(button1)
            markup.add(button2)

            try: bot.delete_message(c.message.chat.id, c.message.id)
            except: pass
            bot.send_message(c.message.chat.id, f'–ó–∞–∫–∞–∑ #{order[1]} (ID - {order[0]})\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å - @{order[2]}\n–¢–æ–≤–∞—Ä - {order[3]}\n–°—Ç–æ–∏–º–æ—Å—Ç—å - {order[4]} —Ä—É–±.', reply_markup=markup)
        elif c.data.split('_')[1] == 'Complete':
            db.change_order_status(c.data.split('_')[0], 'completed')

            try: bot.delete_message(c.message.chat.id, c.message.id)
            except: pass
            bot.send_message(c.message.chat.id, f'‚úÖ –ó–∞–∫–∞–∑ #{c.data.split('_')[0]} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π!')
        elif c.data.split('_')[1] == 'OrderCompleted':
            order = db.get_order(c.data.split('_')[0])

            markup = types.InlineKeyboardMarkup()
            button1 = types.InlineKeyboardButton(text="‚ö†Ô∏è –í–µ—Ä–Ω—É—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data=f"{c.data.split('_')[0]}_CompleteUndo")
            button2 = types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="BackToAdmin")
            markup.add(button1)
            markup.add(button2)

            try: bot.delete_message(c.message.chat.id, c.message.id)
            except: pass
            bot.send_message(c.message.chat.id, f'–ó–∞–∫–∞–∑ #{order[1]} (ID - {order[0]})\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å - @{order[2]}\n–¢–æ–≤–∞—Ä - {order[3]}\n–°—Ç–æ–∏–º–æ—Å—Ç—å - {order[4]} —Ä—É–±.', reply_markup=markup)
        elif c.data.split('_')[1] == 'CompleteUndo':
            db.change_order_status(c.data.split('_')[0], 'paid')

            try: bot.delete_message(c.message.chat.id, c.message.id)
            except: pass
            bot.send_message(c.message.chat.id, f'‚úÖ –ó–∞–∫–∞–∑ #{c.data.split('_')[0]} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π!')

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        elif c.data.split('_')[0] == 'Stats':
            get_stats(c, c.data.split('_')[1])
    except: pass

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
    if c.data == 'AddProduct':
        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–∫–∏ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞", callback_data="AddProductPresent")
        button2 = types.InlineKeyboardButton(text="üëë Telegram Premium", callback_data="AddProductPremium")
        button3 = types.InlineKeyboardButton(text="üåê NFT –Æ–∑–µ—Ä–Ω–µ–π–º—ã", callback_data="AddProductNTFUsername")
        button4 = types.InlineKeyboardButton(text="üöÄ NFT –ü–æ–¥–∞—Ä–∫–∏", callback_data="AddProductNFTPresent")
        button5 = types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="BackToAdmin")
        markup.add(button1)
        markup.add(button2)
        markup.add(button3, button4)
        markup.add(button5)
        try: bot.delete_message(c.message.chat.id, c.message.id)
        except: pass
        bot.send_message(c.message.chat.id, f'üîç –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞...', reply_markup=markup)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    elif c.data == 'AddProductPresent':
        db.change_state(c.message.chat.id, 'add_present')
        try: bot.delete_message(c.message.chat.id, c.message.id)
        except: pass
        bot.send_message(c.message.chat.id, f'üîç –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏...\n–ü—Ä–∏–º–µ—Ä: –ú–∏—à–∫–∞')
    elif c.data == 'AddProductPremium':
        db.change_state(c.message.chat.id, 'add_premium')
        try: bot.delete_message(c.message.chat.id, c.message.id)
        except: pass
        bot.send_message(c.message.chat.id, f'üîç –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –ø—Ä–µ–º–∏—É–º–∞...\n–ü—Ä–∏–º–µ—Ä: Telegram Premium (1 –º–µ—Å)')
    elif c.data == 'AddProductNTFUsername':
        db.change_state(c.message.chat.id, 'add_nftusername')
        try: bot.delete_message(c.message.chat.id, c.message.id)
        except: pass
        bot.send_message(c.message.chat.id, f'üîç –í–≤–µ–¥–∏ NFT –Æ–∑–µ—Ä–Ω–µ–π–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username...\n–ü—Ä–∏–º–µ—Ä: @username')
    elif c.data == 'AddProductNFTPresent':
        db.change_state(c.message.chat.id, 'add_nftpresent')
        try: bot.delete_message(c.message.chat.id, c.message.id)
        except: pass
        bot.send_message(c.message.chat.id, f'üîç –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ NFT –ü–æ–¥–∞—Ä–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏...\n–ü—Ä–∏–º–µ—Ä: –ú–∏—à–∫–∞')
    elif c.data == 'RemoveProduct':
        products = db.get_all_products()
        markup = types.InlineKeyboardMarkup()
        try:
            for product in products:
                if product[1] == 'nftusername':
                    markup.add(types.InlineKeyboardButton(text=f"{product[1]} / {product[2]} / {product[3]} –∑–∞ –¥–µ–Ω—å.", callback_data=f"{product[0]}"))
                else:
                    markup.add(types.InlineKeyboardButton(text=f"{product[1]} / {product[2]} / {product[3]} –∑–∞ —à—Ç.", callback_data=f"{product[0]}"))
        except:
            pass
        button4 = types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="BackToAdmin")
        markup.add(button4)
        try: bot.delete_message(c.message.chat.id, c.message.id)
        except: pass
        bot.send_message(c.message.chat.id, f'üîç –í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å...', reply_markup=markup)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    elif c.data == 'ActiveOrders':
        orders = db.get_active_orders()
        count = 0

        if orders == 1:
            bot.answer_callback_query(c.id, "‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å–µ–π—á–∞—Å –Ω–µ—Ç.", show_alert=False)
            return

        markup = types.InlineKeyboardMarkup()
        try:
            for order in orders:
                count += 1
                if count <= 10:
                    markup.add(types.InlineKeyboardButton(text=f"#{order[1]} (ID - {order[0]})", callback_data=f"{order[1]}_Order"))
        except:
            pass
        button2 = types.InlineKeyboardButton(text="<--", callback_data="Empty")
        button3 = types.InlineKeyboardButton(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {1}", callback_data="Empty")
        button4 = types.InlineKeyboardButton(text="-->", callback_data="2_NextPage")
        button4 = types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="BackToAdmin")
        markup.add(button2, button3, button4)
        markup.add(button4)

        try: bot.delete_message(c.message.chat.id, c.message.id)
        except: pass
        bot.send_message(c.message.chat.id, f'üîç –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã...', reply_markup=markup)
    elif c.data == 'CompletedOrders':
        orders = db.get_completed_orders()
        count = 0

        if orders == 1:
            bot.answer_callback_query(c.id, "‚ö†Ô∏è –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –µ—â–µ –Ω–µ—Ç.", show_alert=False)
            return

        markup = types.InlineKeyboardMarkup()
        try:
            for order in orders:
                count += 1
                if count <= 10:
                    markup.add(types.InlineKeyboardButton(text=f"#{order[1]} (ID - {order[0]})", callback_data=f"{order[1]}_OrderCompleted"))
        except:
            pass
        button2 = types.InlineKeyboardButton(text="<--", callback_data="Empty")
        button3 = types.InlineKeyboardButton(text=f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {1}", callback_data="Empty")
        button4 = types.InlineKeyboardButton(text="-->", callback_data="2_NextPage")
        button4 = types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="BackToAdmin")
        markup.add(button2, button3, button4)
        markup.add(button4)

        try: bot.delete_message(c.message.chat.id, c.message.id)
        except: pass
        bot.send_message(c.message.chat.id, f'üîç –í—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã...', reply_markup=markup)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    elif c.data == 'GetStats':
        count_of_users = len(db.get_stats())

        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(text="1 –¥–Ω.", callback_data="Stats_1d")
        button2 = types.InlineKeyboardButton(text="3 –¥–Ω.", callback_data="Stats_3d")
        button3 = types.InlineKeyboardButton(text="7 –¥–Ω.", callback_data="Stats_7d")
        button4 = types.InlineKeyboardButton(text="10 –¥–Ω.", callback_data="Stats_10d")
        button5 = types.InlineKeyboardButton(text="2 –Ω–µ–¥.", callback_data="Stats_14d")
        button6 = types.InlineKeyboardButton(text="1 –º–µ—Å.", callback_data="Stats_30d")
        button7 = types.InlineKeyboardButton(text="3 –º–µ—Å.", callback_data="Stats_90d")
        button8 = types.InlineKeyboardButton(text="–í—Å–µ –≤—Ä–µ–º—è", callback_data="Stats_All")
        button9 = types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="BackToAdmin")
        markup.add(button1, button2)
        markup.add(button3, button4)
        markup.add(button5, button6)
        markup.add(button7, button8)
        markup.add(button9)

        try: bot.delete_message(c.message.chat.id, c.message.id)
        except: pass
        bot.send_message(c.message.chat.id, f'ü•ã –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: <b>{count_of_users} —á–µ–ª.</b>\nüîç –í—ã–±–µ—Ä–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π.', parse_mode='HTML', reply_markup=markup)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    elif c.data == 'Ads':
        db.change_state(c.message.chat.id, 'ads')

        markup = types.InlineKeyboardMarkup()
        button1 = types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="BackToAdmin")
        markup.add(button1)

        try: bot.delete_message(c.message.chat.id, c.message.id)
        except: pass
        bot.send_message(c.message.chat.id, f'üîç –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é –ø—Ä–∏–∫—Ä–µ–ø–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É (–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º)...', reply_markup=markup)

    elif c.data == 'BackToAdmin':
        try: bot.delete_message(c.message.chat.id, c.message.id)
        except: pass
        show_admin(c.message)
    else:
        try:
            products = db.get_all_products()
            for product in products:
                if product[0] == int(c.data):
                    db.remove_product(product[0])
                    bot.send_message(c.message.chat.id, f'‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!')
                    try: bot.delete_message(c.message.chat.id, c.message.id)
                    except: pass
                    show_admin(c.message)
        except:
            pass

def photo_admin(message):
    try:
        state = db.get_state(message.chat.id)
    except:
        pass
    try:
        if state == 'add_present_photo':
            photo = message.photo[-1]
            file_info = bot.get_file(photo.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            number = random.randint(9, 99999)
            save_path = f'{number}.jpg'
            with open(save_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            db.add_product('present', admin_state.name, admin_state.price, admin_state.description, save_path)
            try: bot.delete_message(message.chat.id, message.id)
            except: pass
            bot.send_message(message.chat.id, f'‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
            show_admin(message)
        elif state == 'add_premium_photo':
            photo = message.photo[-1]
            file_info = bot.get_file(photo.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            number = random.randint(9, 99999)
            save_path = f'{number}.jpg'
            with open(save_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            db.add_product('premium', admin_state.name, admin_state.price, admin_state.description, save_path)
            try: bot.delete_message(message.chat.id, message.id)
            except: pass
            bot.send_message(message.chat.id, f'‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
            show_admin(message)
        elif state == 'add_nftusername_photo':
            photo = message.photo[-1]
            file_info = bot.get_file(photo.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            number = random.randint(9, 99999)
            save_path = f'{number}.jpg'
            with open(save_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            db.add_product('nftusername', admin_state.name, admin_state.price, admin_state.description, save_path)
            try: bot.delete_message(message.chat.id, message.id)
            except: pass
            bot.send_message(message.chat.id, f'‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
            show_admin(message)
        elif state == 'add_nftpresent_photo':
            photo = message.photo[-1]
            file_info = bot.get_file(photo.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            number = random.randint(9, 99999)
            save_path = f'{number}.jpg'
            with open(save_path, 'wb') as new_file:
                new_file.write(downloaded_file)
            db.add_product('nftpresent', admin_state.name, admin_state.price, admin_state.description, save_path)
            try: bot.delete_message(message.chat.id, message.id)
            except: pass
            bot.send_message(message.chat.id, f'‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
            show_admin(message)
        elif state == 'ads':
            photo = message.photo[-1]
            file_info = bot.get_file(photo.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            number = random.randint(9, 99999)
            save_path = f'{number}.jpg'
            with open(save_path, 'wb') as new_file:
                new_file.write(downloaded_file)

            users = db.get_all_users()
            count = 0
            if users is not None:
                for user in users:
                    try:
                        bot.send_photo(int(user[0]), open(save_path, 'rb'), message.caption)
                        count += 1
                    except:
                        pass
            try: bot.delete_message(message.chat.id, message.id)
            except: pass
            bot.send_message(message.chat.id, f'‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ <b>{count} –∏–∑ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!</b>', parse_mode='HTML')
            show_admin(message)
    except:
        try: bot.delete_message(message.chat.id, message.id)
        except: pass
        bot.send_message(message.chat.id, f'‚ö†Ô∏è –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–æ—Ç–æ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ñ–∞–π–ª–∞—Ö —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.')
        show_admin(message)

def show_admin(message):
    db.change_state(message.chat.id, 'None')

    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text="1Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="AddProduct")
    button2 = types.InlineKeyboardButton(text="2Ô∏è‚É£ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="RemoveProduct")
    button3 = types.InlineKeyboardButton(text="3Ô∏è‚É£ –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="ActiveOrders")
    button4 = types.InlineKeyboardButton(text="4Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="CompletedOrders")
    button5 = types.InlineKeyboardButton(text="5Ô∏è‚É£ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="Ads")
    button6 = types.InlineKeyboardButton(text="6Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="GetStats")
    button7 = types.InlineKeyboardButton(text="üè† –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="BackToMenu")
    markup.add(button1, button2)
    markup.add(button3)
    markup.add(button4)
    markup.add(button5, button6)
    markup.add(button7)

    bot.send_message(message.chat.id, f'üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!', reply_markup=markup)

def delete_last_messages(message):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ."""
    print(message.text)
    try:
        bot.delete_message(message.chat.id, message.id)
        bot.delete_message(message.chat.id, message.id - 1)
    except: pass

def add_product(message, state):    
    try:
        if state.split('_')[2] == 'price': 
            # –°–æ—Å—Ç–æ—è–Ω–∏—è - add_present_price, add_premium_price, add_nftusername_price, add_nftpresent_price
            try: 
                admin_state.price = int(message.text)
            except:
                bot.send_message(message.chat.id, f'‚ö†Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ. –í–≤–µ–¥–∏ –µ–µ <b>—Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º</b>!\nüí° –ü—Ä–∏–º–µ—Ä: <b>59</b>', parse_mode='HTML')
                return
            db.change_state(message.chat.id, f'add_{state.split('_')[1]}_description')
            delete_last_messages(message)
            bot.send_message(message.chat.id, f'üîç –ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞... –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Ç–ø—Ä–∞–≤—å –∑–Ω–∞–∫ "-".\nüí° –ü—Ä–∏–º–µ—Ä: <b>–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.</b>', parse_mode='HTML')
        elif state.split('_')[2] == 'description': 
            # –°–æ—Å—Ç–æ—è–Ω–∏—è - add_present_description, add_premium_description, add_nftusername_description, add_nftpresent_description
            admin_state.description = message.text
            db.change_state(message.chat.id, f'add_{state.split('_')[1]}_photo')
            delete_last_messages(message)
            bot.send_message(message.chat.id, f'üîç –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –¥–ª—è —Ç–æ–≤–∞—Ä–∞... –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å –∑–Ω–∞–∫ "-".')
        elif state.split('_')[2] == 'photo': 
            # –°–æ—Å—Ç–æ—è–Ω–∏—è - add_present_photo, add_premium_photo, add_nftusername_photo, add_nftpresent_photo
            if message.text == '-':
                db.add_product(f'{state.split('_')[1]}', admin_state.name, admin_state.price, admin_state.description, message.text)
                delete_last_messages(message)
                bot.send_message(message.chat.id, f'‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
                show_admin(message)
    except: 
        # –°–æ—Å—Ç–æ—è–Ω–∏—è - add_present, add_premium, add_nftusername, add_nftpresent
        if state.split('_')[1] == 'nftusername':
            if message.text[0] == '@': 
                admin_state.name = message.text
            else: 
                admin_state.name = f'@{message.text}'
        else: 
            admin_state.name = message.text
        db.change_state(message.chat.id, f'{state}_price')
        delete_last_messages(message)
        bot.send_message(message.chat.id, f'üîç –ù–∞–ø–∏—à–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö...\nüí° –ü—Ä–∏–º–µ—Ä: <b>59</b>', parse_mode='HTML')

def get_stats(c, interval):
    result = db.get_earnings(interval)
    time_now = int(time.time())
    time_end = 0

    earnings_general = 0
    earnings_stars = 0
    count_of_stars = 0
    earnings_present = 0
    present_text = ''
    earnings_premium = 0
    premium_text = ''
    earnings_nftusername = 0
    nftusername_text = ''
    earnings_nftpresent = 0
    nftpresent_text = ''

    text = ''
    if interval == '1d': 
        text = '1 –¥–µ–Ω—å'
        time_end = time_now - 86400
    elif interval == '3d': 
        text = '3 –¥–Ω—è'
        time_end = time_now - 259200
    elif interval == '7d': 
        text = '7 –¥–Ω–µ–π'
        time_end = time_now - 604800
    elif interval == '10d': 
        text = '10 –¥–Ω–µ–π'
        time_end = time_now - 864000
    elif interval == '14d': 
        text = '2 –Ω–µ–¥–µ–ª–∏'
        time_end = time_now - 1209600
    elif interval == '30d': 
        text = '1 –º–µ—Å—è—Ü'
        time_end = time_now - 2592000
    elif interval == '90d': 
        text = '3 –º–µ—Å—è—Ü–∞'
        time_end = time_now - 7776000
    elif interval == 'All': 
        text = '–≤—Å–µ –≤—Ä–µ–º—è'

    for res in result:
        if int(res[9]) > time_end or time_end == 0:
            earnings_general += int(res[4])
            if res[8] == 'stars':
                earnings_stars += int(res[4])
                count_of_stars = int(res[4] / 2)
            elif res[8] == 'present':
                earnings_present += int(res[4])
                present_text += f' {res[3]} - {int(res[4])} —Ä—É–±. /'
            elif res[8] == 'premium':
                earnings_premium += int(res[4])
                premium_text += f' {res[3]} - {int(res[4])} —Ä—É–±. /'
            elif res[8] == 'nftusername':
                earnings_nftusername += int(res[4])
                nftusername_text += f' {res[3]} - {int(res[4])} —Ä—É–±. ({int(res[7])} –¥–Ω.) /'
            elif res[8] == 'nftpresent':
                earnings_nftpresent += int(res[4])
                nftpresent_text += f' {res[3]} - {int(res[4])} —Ä—É–±. /'

    markup = types.InlineKeyboardMarkup()
    button1 = types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="GetStats")
    markup.add(button1)

    try: bot.delete_message(c.message.chat.id, c.message.id)
    except: pass
    bot.send_message(c.message.chat.id, 
        f'üîç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ <b>{text}.</b>\n'
        f'üí∏ –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ {text}: <b>{earnings_general} —Ä—É–±.</b>\n'
        f'1Ô∏è‚É£ –ü—Ä–æ–¥–∞–Ω—ã –∑–≤–µ–∑–¥—ã –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ <b>{count_of_stars} —à—Ç.</b> –Ω–∞ —Å—É–º–º—É <b>{earnings_stars} —Ä—É–±.</b>\n'
        f'2Ô∏è‚É£ –ü—Ä–æ–¥–∞–Ω—ã –ø–æ–¥–∞—Ä–∫–∏ –Ω–∞ —Å—É–º–º—É <b>{earnings_present} —Ä—É–±.</b>:{present_text[:-1]}\n'
        f'3Ô∏è‚É£ –ü—Ä–æ–¥–∞–Ω Premium –Ω–∞ —Å—É–º–º—É <b>{earnings_premium} —Ä—É–±.</b>:{premium_text[:-1]}\n'
        f'4Ô∏è‚É£ –ü—Ä–æ–¥–∞–Ω—ã NFT –Æ–∑–µ—Ä–Ω–µ–π–º—ã –Ω–∞ —Å—É–º–º—É <b>{earnings_nftusername} —Ä—É–±.</b>:{nftusername_text[:-1]}\n'
        f'5Ô∏è‚É£ –ü—Ä–æ–¥–∞–Ω—ã NFT –ü–æ–¥–∞—Ä–∫–∏ –Ω–∞ —Å—É–º–º—É <b>{earnings_nftpresent} —Ä—É–±.</b>:{nftpresent_text[:-1]}\n',
        parse_mode='HTML', reply_markup=markup)